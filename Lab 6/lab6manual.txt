1) Implementing a 4-to-1 multiplexer in Verilog [10 points]
Create a new file in the "lab6" workspace and rename it "step1.sv". In the top module, create an instance of a 4-to-1 multiplexer like so:

	mux4to1 u1(.sel(pb[1:0]), .d(pb[7:4]), .y(green));
That is all you need to add to the top module. The goal of this exercise is to create a system that allows you to specify four values on buttons 7–4 and then select one of them with buttons 1 and 0.

Immediately below the top module, create a module named mux4to1 with ports
output logic y,
input logic [3:0]d,
input logic [1:0]sel,
In it, implement a 4-to-1 multiplexer. Here is an example of a 2-to-1 multiplexer in Verilog:

module mux2to1 (
    output logic y,
    input logic [1:0] d,
    input logic sel
);

  assign y = ~sel & d[0] |
              sel & d[1];

endmodule

You will have four 'd' inputs instead of two, and two 'sel' inputs instead of one, but the principle is the same.

Test your module well. Use <shift>-click on push buttons 7–4 to set the d[3:0] inputs to a persistent value. Then use buttons 1 and 0 to "select" one of those inputs. If buttons 7–4 are set to 1110, then pressing the 1 and 0 buttons as follows will show the result on the green LED:

sel[1]	sel[0]	green LED
0	0	0
0	1	1
1	0	1
1	1	1

And you can see that sel[1:0] are the inputs and green is the output for an OR function. Changing d[3:0] to 0110 would implement an XOR function. Any two-variable Boolean expression can be implemented with a 4-to-1 mux. This is why multiplexers are used in an FPGA. The FPGA we use for this course is filled with 16-to-1 multiplexers that can naturally implement any 4-variable Boolean expression. These "logic cells" can be interconnected to form extremely complex designs.

2) Implement a 16-to-4 basic encoder in Verilog [10 points]
Create a SystemVerilog file in the "lab6" workspace of the simulator. Rename it "step2.sv". In the top module create a single instance:

	enc16to4 u1(.in(pb[15:0]), .out(right[3:0]), .strobe(green));
Below the top module, create a new module named enc16to4 with the following ports (in any order you like):
input logic [15:0] in
output logic [3:0] out
output logic strobe
An encoder is a basic device that uses the 16-bit input to determine which of the 4 outputs to turn on. It "encodes" the input into the output by activating the binary encoding that corresponds to its number. Consider the example of an 8-to-3 encoder below:



In this example, input I7 has been turned on, while the rest of the inputs I6 through I0 remain off. The 3-bit binary form of this number is 3'b111, and so the encoder outputs 1 on all of its outputs. Take note that this encoder does not have a strobe, but you are asked to implement one for this step.

Follow this pattern to build a basic encoder with sixteen inputs, four outputs, and a strobe output signal. When any single input is asserted, the strobe output should be asserted, with the outputs indicating the binary encoding of the input as explained in the example above. For example, if in[5] is pressed, the strobe signal should be asserted, and the value of out[3:0] should be 4'b0101.

A basic encoder has a deficiency that multiple input assertions will result in a composite output. For instance, if in[5] and in[9] were asserted at the same time, the out signal will be 4'b1101 (which is the bitwise 'OR' of 4'b0101 and 4'b1001). We specifically want to see this behavior in your design, so you will not get any points if you submit a priority encoder, or other such device that ignores inputs in any way. An effect of this deficiency is exhibited in the example of the 8-to-3 decoder below - observe that the inputs I5 and I2 are asserted, but the output shows 3'b111, or 7, which is obviously neither 5 nor 2.



To implement this module, set it up so that:
out[3] is 1 when any of in[15:8] are asserted
out[2] is 1 when any of in[15:12] or in[7:4] are asserted
out[1] is 1 when any of in[15:14], in[11:10], in[7:6], in[3:2], are asserted
out[0] is 1 when any of the odd-numbered elements of in are asserted
To test your design, press any of the push buttons from 'F' – '0'. You should see the binary-encoded result on the four rightmost red LEDs. When any of those sixteen buttons are pressed, the green center LED should also light up. In a later exercise, you will have a more intuitive way of testing your encoder.

Create a SystemVerilog file in the "lab6" workspace of the simulator. Rename it "step3.sv". In the top module create a single instance:

	prienc16to4 u1(.in(pb[15:0]), .out(right[3:0]), .strobe(green));
Below the top module, create a new module named prienc16to4 with the following ports (in any order you like):
input logic [15:0] in
output logic [3:0] out
output logic strobe
A priority encoder overcomes the deficiency with multiple input assertions that we saw in the previous step. For instance, if in[5] and in[9] were asserted at the same time, the out signal will be 4'b1001 since nine is greater than five.

You will build this priority encoder with sixteen inputs, four outputs, and a strobe output signal. When any single input is asserted, the strobe output should be asserted, and the binary encoding of the input. For instance, if in[5] is pressed, the strobe signal should be asserted, and the value of out[3:0] should be 4'b0101.